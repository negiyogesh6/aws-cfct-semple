AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Password Policy Configuration'

Resources:
  CustomResource:
    Type: 'Custom::PasswordPolicy'
    Properties:
      ServiceToken: !GetAtt PasswordPolicyFunction.Arn
      MinimumPasswordLength: 14
      RequireSymbols: true
      RequireNumbers: true
      RequireUppercaseCharacters: true
      RequireLowercaseCharacters: true
      AllowUsersToChangePassword: true
      MaxPasswordAge: 90
      PasswordReusePrevention: 3
      HardExpiry: false

  PasswordPolicyFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def convert_types(properties):
              # Convert string values to appropriate types
              return {
                  'MinimumPasswordLength': int(properties['MinimumPasswordLength']),
                  'RequireSymbols': str(properties['RequireSymbols']).lower() == 'true',
                  'RequireNumbers': str(properties['RequireNumbers']).lower() == 'true',
                  'RequireUppercaseCharacters': str(properties['RequireUppercaseCharacters']).lower() == 'true',
                  'RequireLowercaseCharacters': str(properties['RequireLowercaseCharacters']).lower() == 'true',
                  'AllowUsersToChangePassword': str(properties['AllowUsersToChangePassword']).lower() == 'true',
                  'MaxPasswordAge': int(properties['MaxPasswordAge']),
                  'PasswordReusePrevention': int(properties['PasswordReusePrevention']),
                  'HardExpiry': str(properties['HardExpiry']).lower() == 'true'
              }
          
          def handler(event, context):
              iam = boto3.client('iam')
              response_data = {}
              
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      # Convert the property types before passing to IAM
                      props = convert_types(event['ResourceProperties'])
                      iam.update_account_password_policy(
                          MinimumPasswordLength=props['MinimumPasswordLength'],
                          RequireSymbols=props['RequireSymbols'],
                          RequireNumbers=props['RequireNumbers'],
                          RequireUppercaseCharacters=props['RequireUppercaseCharacters'],
                          RequireLowercaseCharacters=props['RequireLowercaseCharacters'],
                          AllowUsersToChangePassword=props['AllowUsersToChangePassword'],
                          MaxPasswordAge=props['MaxPasswordAge'],
                          PasswordReusePrevention=props['PasswordReusePrevention'],
                          HardExpiry=props['HardExpiry']
                      )
                  elif event['RequestType'] == 'Delete':
                      try:
                          iam.delete_account_password_policy()
                      except iam.exceptions.NoSuchEntityException:
                          pass
                  
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)
      Runtime: python3.9
      Timeout: 30

  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: PasswordPolicyPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:UpdateAccountPasswordPolicy'
                  - 'iam:DeleteAccountPasswordPolicy'
                Resource: '*'
